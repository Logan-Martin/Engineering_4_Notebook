import board # type: ignore
import digitalio  # type: ignore
import adafruit_mpu6050  # type: ignore
import busio  # type: ignore
import time # type: ignore
from adafruit_display_text import label # type: ignore
import adafruit_displayio_ssd1306 # type: ignore
import terminalio # type: ignore
import displayio # type: ignore

displayio.release_displays() #put this line just below your imports

sda_pin = board.GP14
scl_pin = board.GP15
i2c = busio.I2C(scl_pin, sda_pin) 

display_bus = displayio.I2CDisplay(i2c, device_address=0x3d, reset=board.GP13)
display = adafruit_displayio_ssd1306.SSD1306(display_bus, width=128, height=64)

mpu = adafruit_mpu6050.MPU6050(i2c, address=0x68)

AccelerationMessage = "Acceleration: "
GyroMessage = "Gyro: "
# Pico, ['0x68']. 
# OLED Screen, ['0x3d'].

# X = mpu.acceleration[0]
# Y = mpu.acceleration[1]
# Z = mpu.acceleration[2]

# create the display group
splash = displayio.Group()

# add title block to display group
title = "ANGULAR VELOCITY"
# the order of this command is (font, text, text color, and location)
text_area = label.Label(terminalio.FONT, text=title, color=0xFFFF00, x=5, y=5)
splash.append(text_area)    

# you will write more code here that prints the x, y, and z angular velocity values to the screen below the title. Use f strings!
# Don't forget to round the angular velocity values to three decimal places

# send display group to screen
display.show(splash)


led = digitalio.DigitalInOut(board.LED) # on board LED
led.direction = digitalio.Direction.OUTPUT

redLED = digitalio.DigitalInOut(board.GP16)
redLED.direction = digitalio.Direction.OUTPUT



while True:
    time.sleep(0.1)
    print(str(mpu.acceleration))
    if mpu.acceleration[0] >= 9.5 and mpu.acceleration[0] <= 10.5 or mpu.acceleration[1] >= 9.5 and mpu.acceleration[1] <= 10.5:
        print("Tilted 90 degrees.")
        redLED.value = True
    else:
        redLED.value = False
        
